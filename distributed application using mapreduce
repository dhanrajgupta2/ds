Exp 12

Design a distributed application using MapReduce which processes a log file of a system

sol

LogAnalysis.java

import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;

import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;

import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class LogAnalysis {

    public static class LogMapper extends Mapper<Object, Text, Text, IntWritable> {
        private final static IntWritable one = new IntWritable(1);
        private Text ipAddress = new Text();

        private static final Pattern logPattern = Pattern.compile("^(\\S+)");

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            Matcher matcher = logPattern.matcher(value.toString());
            if (matcher.find()) {
                ipAddress.set(matcher.group(1));
                context.write(ipAddress, one);
            }
        }
    }
<==============================================================================================================================>
or // runs code partially atleast 

import java.io.IOException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Mapper;

public class LogAnalysis {
    public static class LogMapper extends Mapper<Object, Text, Text, IntWritable> {
        private static final IntWritable ONE = new IntWritable(1);
        private Text ip = new Text();
        private static final Pattern logPattern = Pattern.compile("^(\\S+)");

public void map(Object key, Text value, Context context) 
                throws IOException, InterruptedException {
            Matcher matcher = logPattern.matcher(value.toString());
            if (matcher.find()) {
                ip.set(matcher.group(1)); // Set IP
                context.write(ip, ONE);    // Emit <IP, 1>
            }
        }
    }
}

<==============================================================================================================================>
    public static class LogReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        private IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values,
                           Context context) throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable val : values)
                sum += val.get();
            result.set(sum);
            context.write(key, result);
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "log file analysis");

        job.setJarByClass(LogAnalysis.class);
        job.setMapperClass(LogMapper.class);
        job.setCombinerClass(LogReducer.class);
        job.setReducerClass(LogReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0])); // log file input
        FileOutputFormat.setOutputPath(job, new Path(args[1])); // output dir

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}

# How to Run on Local/Pseudo Cluster (Ubuntu)

 mkdir logs
nano logs/sample_log.txt  # Paste the logs

  mkdir LogClasses
javac -classpath `hadoop classpath` -d LogClasses LogAnalysis.java
jar -cvf loganalysis.jar -C LogClasses/ .

  hadoop jar loganalysis.jar LogAnalysis logs output_logs

  cat output_logs/part-r-00000
